import smbus
import time

bus = smbus.SMBus(1)
MPL3115A2_ADDR = 0x60
CTRL_REG1 = 0x26
PT_DATA_CFG = 0x13
STATUS = 0x00

def write_ctrl_reg1(value):
    bus.write_byte_data(MPL3115A2_ADDR, CTRL_REG1, value)

def read_status():
    return bus.read_byte_data(MPL3115A2_ADDR, STATUS)

def init_sensor():
    bus.write_byte_data(MPL3115A2_ADDR, PT_DATA_CFG, 0x07)  # Enable data flags
    ctrl = bus.read_byte_data(MPL3115A2_ADDR, CTRL_REG1)
    ctrl &= ~0x01  # Ensure SBYB = 0
    write_ctrl_reg1(ctrl)

def set_mode(altimeter=True):
    ctrl = bus.read_byte_data(MPL3115A2_ADDR, CTRL_REG1)
    ctrl &= ~(0x80)  # Clear ALT bit
    if altimeter:
        ctrl |= 0x80  # Set ALT bit for Altimeter mode
    ctrl |= 0x38  # Set OSR = 128
    ctrl &= ~0x01  # SBYB = 0 (standby)
    write_ctrl_reg1(ctrl)
    time.sleep(0.1)

def trigger_measurement():
    ctrl = bus.read_byte_data(MPL3115A2_ADDR, CTRL_REG1)
    ctrl |= 0x01  # SBYB = 1 (active)
    write_ctrl_reg1(ctrl)

def wait_for_data():
    for _ in range(10):
        status = read_status()
        if status & 0x08:  # Check if new data is ready
            return True
        time.sleep(0.05)
    return False

def read_data():
    data = bus.read_i2c_block_data(MPL3115A2_ADDR, 0x00, 6)
    return data

def parse_altitude_temp(data):
    alt = (data[1] << 8) | data[2]
    alt_frac = data[3] / 256.0
    if alt > 32767:
        alt -= 65536
    altitude = alt + alt_frac

    temp = (data[4] << 8 | data[5]) >> 4
    if temp > 2047:
        temp -= 4096
    temperature = temp / 16.0

    return altitude, temperature

def parse_pressure_temp(data):
    pressure = ((data[1] << 16) | (data[2] << 8) | data[3]) >> 4
    pressure_hPa = pressure / 4.0

    temp = (data[4] << 8 | data[5]) >> 4
    if temp > 2047:
        temp -= 4096
    temperature = temp / 16.0

    return pressure_hPa, temperature

# Initialize
init_sensor()

try:
    while True:
        # Altimeter mode
        set_mode(altimeter=True)
        trigger_measurement()
        if wait_for_data():
            data = read_data()
            altitude, temp1 = parse_altitude_temp(data)
        else:
            altitude, temp1 = 0, 0

        # Barometer mode
        set_mode(altimeter=False)
        trigger_measurement()
        if wait_for_data():
            data = read_data()
            pressure, temp2 = parse_pressure_temp(data)
        else:
            pressure, temp2 = 0, 0

        print(f"Altitude: {altitude:.2f} m | Pressure: {pressure:.2f} hPa | Temp: {temp1:.2f} Â°C")

        time.sleep(1)

except KeyboardInterrupt:
    print("\nStopped by user.")
